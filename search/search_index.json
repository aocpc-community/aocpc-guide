{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao Guia de Concursos Angolanos de Programa\u00e7\u00e3o (AoCPC)","text":"<p>Guia de programa\u00e7\u00e3o competitiva para os participantes do AoCPC, criado pela AoCPC Community.  </p> [EN] translation"},{"location":"#welcome-to-the-competitive-programming-guide-aocpc","title":"Welcome to the Competitive Programming Guide (AoCPC)","text":"<p>Competitive programming Guide for AoCPC participants, created by the AoCPC Community.</p>"},{"location":"#menu-principal","title":"\ud83d\udccc Menu Principal","text":"<p>Navegue facilmente pelas se\u00e7\u00f5es principais do guia:</p> <ul> <li>\ud83d\udcda Aprender Conte\u00fados e aulas para desenvolver suas habilidades.</li> <li>\ud83c\udfc6 Praticar Desafios e concursos para testar seu conhecimento.</li> <li>\ud83e\uddf0 Recursos Materiais, refer\u00eancias e ferramentas \u00fateis.</li> <li>\ud83d\udc65 Comunidade D\u00favidas frequentes e intera\u00e7\u00e3o com outros participantes.</li> <li>\ud83d\udd17 Links Diretos Acesso r\u00e1pido a t\u00f3picos e conte\u00fados espec\u00edficos.</li> </ul>"},{"location":"#creditos","title":"Cr\u00e9ditos","text":"<ol> <li>Autor: <code>AOCPC Community</code></li> <li>Organiza\u00e7\u00f5es: <code>ICPC &gt; ACPC &gt; AoCPC</code></li> <li>Suportes: <code>#####</code></li> <li>Local e Data: <code>Luanda July 2024</code></li> </ol> <p>\"Problem solving is a lifestyle\".</p> <ol> <li>Facebook: https://www.facebook.com/AngolaCPC</li> <li>LinkedIn: https://www.linkedin.com/company/aocpc-community</li> <li>GitHub: https://github.com/aocpc-community/aocpc-guide</li> <li>WhatsApp: https://chat.whatsapp.com/Dlr8483llslCeqYZUgx30J</li> <li>Telegram: https://t.me/+rN4SZheQgiw2Yjk0</li> <li>YouTube: https://www.youtube.com/@aocpc_community</li> </ol>"},{"location":"about/","title":"About","text":""},{"location":"about/#creditos","title":"Cr\u00e9ditos","text":"<ol> <li>Autor: <code>AOCPC Community</code></li> <li>Organiza\u00e7\u00f5es: <code>ICPC &gt; ACPC &gt; AoCPC</code></li> <li>Suportes: <code>#####</code></li> <li>Local e Data: <code>Luanda July 2024</code></li> </ol> <p>\"Problem solving is a lifestyle\".</p> <ol> <li>Facebook: https://www.facebook.com/AngolaCPC</li> <li>LinkedIn: https://www.linkedin.com/company/aocpc-community</li> <li>GitHub: https://github.com/aocpc-community/aocpc-guide</li> <li>WhatsApp: https://chat.whatsapp.com/Dlr8483llslCeqYZUgx30J</li> <li>Telegram: https://t.me/+rN4SZheQgiw2Yjk0</li> <li>YouTube: https://www.youtube.com/@aocpc_community</li> </ol>"},{"location":"code_of_conduct/","title":"Code of conduct","text":""},{"location":"code_of_conduct/#codigo-de-conduta","title":"C\u00f3digo de Conduta","text":"<p>Endossamos e seguimos integralmente o C\u00f3digo de Conduta estabelecido pela Olimp\u00edada Internacional de Inform\u00e1tica (IOI). O c\u00f3digo oficial est\u00e1 dispon\u00edvel no site da IOI.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#frequently-asked-questions-faq","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#quais-linguagens-de-programacao-sao-usadas","title":"Quais linguagens de programa\u00e7\u00e3o s\u00e3o usadas?","text":"<p>C/C++, Java e Python.</p>"},{"location":"faq/#e-obrigatorio-saber-todas-as-linguagens-c-c-java-python-ou-basta-dominar-uma","title":"\u00c9 obrigat\u00f3rio saber todas as linguagens (C++, C, Java, Python), ou basta dominar uma?","text":"<p>N\u00e3o \u00e9 obrigat\u00f3rio, mas \u00e9 recomendado ter familiaridade com todas. Existem situa\u00e7\u00f5es em que uma linguagem facilita mais a resolu\u00e7\u00e3o de certos problemas. Por exemplo, as STLs em C++ ajudam bastante com estruturas de dados e algoritmos como <code>lower_bound</code>.</p>"},{"location":"faq/#a-questao-do-tempo-de-execucao-sera-avaliada-java-e-python-sao-mais-lentas-que-c-e-c","title":"A quest\u00e3o do tempo de execu\u00e7\u00e3o ser\u00e1 avaliada? Java e Python s\u00e3o mais lentas que C e C++.","text":"<p>Sim, C e C++ s\u00e3o mais r\u00e1pidos. Em alguns casos, o tempo de execu\u00e7\u00e3o ser\u00e1 considerado, mas na maioria dos exerc\u00edcios isso n\u00e3o ser\u00e1 um fator decisivo. Muitas vezes, os testes s\u00e3o constru\u00eddos para aceitar solu\u00e7\u00f5es em qualquer uma das quatro linguagens, dependendo da implementa\u00e7\u00e3o.</p>"},{"location":"faq/#estou-com-dificuldades-em-encontrar-os-exercicios-e-comecar-a-resolver-os-problemas","title":"Estou com dificuldades em encontrar os exerc\u00edcios e come\u00e7ar a resolver os problemas.","text":"<p>Assim que aceder ao torneio, os problemas estar\u00e3o listados \u00e0 esquerda da interface. Selecione o problema desejado e envie sua solu\u00e7\u00e3o clicando em \"submeter\".</p> <p>\ud83d\udcd8 Exemplo pr\u00e1tico no seguinte tutorial: link do tutorial</p>"},{"location":"faq/#onde-posso-encontrar-os-contests","title":"Onde posso encontrar os contests?","text":"<p>No reposit\u00f3rio oficial, mais especificamente na se\u00e7\u00e3o Contests.</p>"},{"location":"faq/#onde-posso-encontrar-as-aulas-do-ano-passado","title":"Onde posso encontrar as aulas do ano passado?","text":"<p>No mesmo reposit\u00f3rio, na se\u00e7\u00e3o Lectures (2023).</p>"},{"location":"faq/#o-que-significa-ler-t-casos-de-teste","title":"O que significa ler \"t\" casos de teste?","text":"<pre> \n<pre><code>int t;\ncin &gt;&gt; t;\nwhile(t--) {\n    // Tua solu\u00e7\u00e3o...\n}\n</code></pre>\n</pre>"},{"location":"guide/aprender/","title":"Aprender","text":""},{"location":"guide/aprender/#aulas-2025","title":"Aulas 2025","text":"# Topic Link 00 Concursos de Programa\u00e7\u00e3o https://youtube.com/live/fPxpVi4no7I 01 Complexidade de Algoritmos https://youtube.com/live/uX0mdrs_xdk 02 [Pr\u00e1tica] Ordena\u00e7\u00e3o e Pesquisa Bin\u00e1ria + Opera\u00e7\u00f5es e Consultas em Arrays https://youtu.be/altpSvwNbUs 03 [Pr\u00e1tica] Matem\u00e1tica https://www.youtube.com/live/u3zkf9LsEnM?si=_x364OIH18kusNeP 04 [Pr\u00e1tica] Grafos https://youtube.com/live/a6LUbD118E8 05 Programa\u00e7\u00e3o Din\u00e2mica https://www.youtube.com/live/qHnUougiq60 06 \u00c1rvores de Segmentos (Segment Trees) e Lazy Propagation https://youtube.com/live/38n2Xv6gt1M 07 Resolu\u00e7\u00e3o de Problemas das Edi\u00e7\u00f5es Passadas 2024 https://youtube.com/live/uD3fAvx3vmA 08 Resolu\u00e7\u00e3o de Problemas das Edi\u00e7\u00f5es Passadas ? https://youtu.be/#"},{"location":"guide/aprender/#aulas-2024-parte-2","title":"Aulas 2024 (Parte 2)","text":"# Topic Link 00 C++ STL, Bruteforce e Backtracking https://youtu.be/E5FlE3o7aNs 01 Pilhas Monot\u00f3nicas e Pesquisa Bin\u00e1ria na Resposta https://youtu.be/upebuSQF1rw 02 Manipula\u00e7\u00e3o Bit a Bit (Bitwise Manipulation), Truques e T\u00e9cnicas em Matrizes https://youtu.be/-XoeqOOMxoU 03 Algoritmos de Ordena\u00e7\u00e3o e F\u00f3rmulas Matem\u00e1ticas (Cl\u00e1ssicas) https://youtu.be/ijeIPfOfHNw 04 Algoritmos de Grafos e Disjoint Sets https://youtu.be/gv9xUsJvVso 05 \u00c1rvores de Segmentos https://youtu.be/QF2S9nHlS7o 06 Resolu\u00e7\u00e3o de Problemas de Programa\u00e7\u00e3o Din\u00e2mica https://youtu.be/GhFcAXecjPM"},{"location":"guide/aprender/#aulas-2024-parte-1","title":"Aulas 2024 (Parte 1)","text":"# Topic Link 00 Uma Viagem pelo mundo dos Concursos de Programa\u00e7\u00e3o https://youtu.be/r3C1Qv6BZl8 01 Complexidade de Algoritmos (An\u00e1lise Assint\u00f3tica) https://youtu.be/TVkhWvClnA0 02 Pesquisa Bin\u00e1ria + Opera\u00e7\u00f5es e Consultas em Arrays https://youtu.be/KXsj4bWNrCc 03 Matem\u00e1tica https://youtu.be/RzPjwv9lFHA 04 Greedy vs Programa\u00e7\u00e3o Din\u00e2mica https://youtu.be/-NEyxkz3Uvs 05 Grafos https://youtu.be/jg4R9RoQv6Y 06 Resolu\u00e7\u00e3o de Problemas Diversos Indispon\u00edvel 2024"},{"location":"guide/aprender/#aulas-2023","title":"Aulas 2023","text":"# Topic Link 00 Concursos de Programa\u00e7\u00e3o https://youtu.be/xQ4PA2a_vvU 01 Complexidade de Algoritmos https://youtu.be/iB6ufBGfiVo 03 Ordena\u00e7\u00e3o, Busca Bin\u00e1ria e Aplica\u00e7\u00f5es https://youtu.be/kBlSqEdyFIM 04 Opera\u00e7\u00f5es em Arrays (Est\u00e1ticos) https://youtu.be/vTvHSGbZ9O8 04 (Resolu\u00e7\u00e3o de Exerc\u00edcios) Opera\u00e7\u00f5es em Arrays https://youtu.be/Y0YDkhjb5_4 05 Teoria dos N\u00fameros https://youtu.be/0IoxQkYQdVM 06 Greedy https://youtu.be/6ePTnxNZbO0 07 Programa\u00e7\u00e3o Din\u00e2mica https://youtu.be/vlHAt7e3QI0 08 Grafos https://youtu.be/2182WzIE_AI https://www.youtube.com/watch?v=5cyz8Qyh1wg https://www.youtube.com/watch?v=fK82QhT8_Hk https://www.youtube.com/watch?v=bdrkpgGRHkA 09 Resolu\u00e7\u00e3o de Problemas Diversos"},{"location":"guide/boas-praticas/","title":"Refer\u00eancias Recomendadas para C\u00f3digo Limpo e Boas Pr\u00e1ticas","text":""},{"location":"guide/boas-praticas/#1-neal-wu-atcodercodeforces","title":"1. Neal Wu (AtCoder/Codeforces)","text":"<ul> <li>Perfil no AtCoder: Submiss\u00f5es do neal</li> <li>Perfil no Codeforces: Submiss\u00f5es do neal</li> <li>Qualidades Not\u00e1veis:</li> <li>Estilo extremamente limpo e consistente</li> <li>Abordagem modular para resolver problemas</li> <li>Uso excelente de fun\u00e7\u00f5es auxiliares</li> <li>Padr\u00f5es de implementa\u00e7\u00e3o otimizados</li> <li>Boa documenta\u00e7\u00e3o no c\u00f3digo quando necess\u00e1rio</li> </ul>"},{"location":"guide/boas-praticas/#2-shayan-codeforces","title":"2. Shayan (Codeforces)","text":"<ul> <li>Perfil: Submiss\u00f5es do Shayan</li> <li>Pontos Fortes:</li> <li>Implementa\u00e7\u00e3o bem estruturada</li> <li>Nomes de vari\u00e1veis claros</li> <li>Uso eficiente da biblioteca padr\u00e3o</li> <li>Boa decomposi\u00e7\u00e3o de problemas</li> </ul>"},{"location":"guide/boas-praticas/#observacoes-chave-para-codigo-limpo","title":"Observa\u00e7\u00f5es Chave para C\u00f3digo Limpo","text":"<ol> <li>Formata\u00e7\u00e3o Consistente:</li> <li>Indenta\u00e7\u00e3o uniforme</li> <li>Espa\u00e7amento l\u00f3gico</li> <li> <p>Estilo de chaves consistente</p> </li> <li> <p>Nomenclatura Significativa:</p> </li> <li>Nomes de vari\u00e1veis descritivos</li> <li> <p>Nomes de fun\u00e7\u00f5es que indicam claramente seu prop\u00f3sito</p> </li> <li> <p>Design Modular:</p> </li> <li>Divis\u00e3o de problemas em fun\u00e7\u00f5es l\u00f3gicas</li> <li>Componentes reutiliz\u00e1veis</li> <li> <p>Separa\u00e7\u00e3o entre I/O e l\u00f3gica</p> </li> <li> <p>Efici\u00eancia:</p> </li> <li>Algoritmos \u00f3timos</li> <li>Opera\u00e7\u00f5es redundantes m\u00ednimas</li> <li> <p>Uso inteligente de features da linguagem</p> </li> <li> <p>Legibilidade:</p> </li> <li>Fluxo l\u00f3gico</li> <li>Coment\u00e1rios claros onde necess\u00e1rios</li> <li>Evitar one-liners excessivamente complexos que prejudicam a clareza</li> </ol>"},{"location":"guide/boas-praticas/#como-usar-essas-referencias","title":"Como Usar Essas Refer\u00eancias","text":"<ol> <li>Estude as solu\u00e7\u00f5es deles para problemas que voc\u00ea j\u00e1 tentou</li> <li>Compare sua abordagem com a deles</li> <li>Observe como eles tratam casos extremos (edge cases)</li> <li>Analise seus padr\u00f5es de organiza\u00e7\u00e3o</li> <li>Adapte as melhores pr\u00e1ticas ao seu pr\u00f3prio estilo</li> </ol> <p>Lembre-se: O objetivo n\u00e3o \u00e9 copiar diretamente, mas entender e incorporar os princ\u00edpios que tornam o c\u00f3digo deles eficaz.</p>"},{"location":"guide/boas-praticas/#nomenclaturas-communs-para-certos-topicos","title":"Nomenclaturas communs para certos t\u00f3picos","text":""},{"location":"guide/boas-praticas/#exemplos-de-codigos","title":"Exemplos de C\u00f3digos","text":"Set Add Query.cpp<pre><code>    int N, Q;\n    cin &gt;&gt; N &gt;&gt; Q;\n    vector&lt;bool&gt; contains(N, false);\n    vector&lt;int64_t&gt; answers(N, 0);\n    vector&lt;int64_t&gt; size_prefix_sum(Q + 1, 0);\n    vector&lt;int&gt; last_added(N, -1);\n    int size = 0;\n\n    for (int i = 0; i &lt; Q; i++) {\n        int x;\n        cin &gt;&gt; x;\n        x--;\n\n        if (!contains[x]) {\n            contains[x] = true;\n            size++;\n            last_added[x] = i;\n        } else {\n            contains[x] = false;\n            size--;\n            answers[x] += size_prefix_sum[i] - size_prefix_sum[last_added[x]];\n        }\n\n        size_prefix_sum[i + 1] = size_prefix_sum[i] + size;\n    }\n\n    for (int x = 0; x &lt; N; x++)\n        if (contains[x])\n            answers[x] += size_prefix_sum[Q] - size_prefix_sum[last_added[x]];\n</code></pre>"},{"location":"guide/comunidade/","title":"Comunidade","text":""},{"location":"guide/comunidade/#junte-se-a-comunidade","title":"Junte-se \u00e0 Comunidade","text":"<ol> <li>WhatsApp - Grupo da comunidade no WhatsApp</li> <li>Telegram - Canal no Telegram</li> <li>Facebook - P\u00e1gina oficial no Facebook</li> <li>LinkedIn - Perfil profissional no LinkedIn</li> <li>GitHub - Reposit\u00f3rios de treinamento</li> <li>YouTube - Canal oficial no YouTube</li> </ol>"},{"location":"guide/comunidade/#terminologias-importantes","title":"Terminologias importantes","text":"Abrevia\u00e7\u00e3o Significado CP Competitive Programming (Programa\u00e7\u00e3o Competitiva) TLE Time Limited Exceeded (Tempo Limite Excedido) WA Wrong Answer (Resposta Errada) RE Runtime Error (Erro do Tempo de Execuss\u00e3o)"},{"location":"guide/dicas-de-resolucao/","title":"Dicas de resolucao","text":"<p>Tip for &lt; 1600 rated people. If you're struggling to build accuracy in Codeforces contests and getting too many Wrong Answers on your submissions do this...</p> <p>\ud83e\udde0 Mindset shift: - Firstly, assume that most solutions that you think are just wrong or not good enough. - Do not compare yourself to people who are &gt; 2000 rated who are able to solve A, B, C problems just by intuitive guess-work. It only happens because of their experience. - Next, make sure that when you think of a solution, you only code it out when you're absolutely sure. Prove it if you can, or try to disprove it with multiple test cases or arguments. If you can't make a strong argument of it working, do not submit.</p> <p>\ud83c\udfcb\ufe0f Action Plan: Before you attempt your next actual contest, attempt 5 virtual contests but with a slight twist. You only get to submit all the problems that you could solve in the 2 hours, in the last 10 minutes of the contest. If any of them fails try to fix it within those 10 minutes. </p>"},{"location":"guide/dicas-de-resolucao/#post-this-youll-instantly-have-a-different-mindset-when-you-go-for-your-next-actual-contest-do-lemme-know-how-it-goes-once-youve-tried-it","title":"Post this, you'll instantly have a different mindset when you go for your next actual contest. Do lemme know how it goes once you've tried it.","text":"<p>Here's what you should do if you're in the following rating range on Codeforces.</p> <p>900 to 1150 - Learn topics such as Recursion, Bit Manipulation, Number Theory, Prefix Sums, Adhoc Problems, etc which are very useful for tackling the 2nd problem in CF Div 2 rounds and level up to Pupil.</p> <p>1150 to 1350 - Learn topics such as Adv Binary Search, 2 Pointers, Adv Number Theory, Greedy Algorithms, String Hashing, Tries, etc which are very useful for tackling the 3rd problem in CF Div 2 rounds and level up to Specialist.</p>"},{"location":"guide/dicas-de-resolucao/#1350-to-1600-learn-topics-such-as-dynamic-programming-graphs-trees-segment-trees-sparse-tables-etc-which-are-very-useful-for-tackling-the-4th-problem-in-cf-div-2-rounds-and-level-up-to-expert","title":"1350 to 1600 - Learn topics such as Dynamic Programming, Graphs, Trees, Segment Trees, Sparse Tables, etc which are very useful for tackling the 4th problem in CF Div 2 rounds and level up to Expert.","text":"<p>Here are 7 things that you can do to improve your speed in competitive programming. I am not going to ask you to improve your typing speed \ud83d\ude44</p> <ul> <li> <p>Read the problem statement carefully. You don't want to be implementing something unintended. Give special emphasis on constraints to avoid coding a solution that gives you TLE or MLE.</p> </li> <li> <p>Think twice but code just once. Make sure your approach is finalised before you start writing any code. Re-thinking an approach is better than testing your wrong approach and finally re-implementing a new approach.</p> </li> <li> <p>Learn about inbuilt data structures and functions. Learn about C++ STL as it contains a lot of inbuilt data structures and really efficient functions. Learn about some unconventional but heavily used DS in your programming language like ordered sets in C++</p> </li> <li> <p>Make a CP template. Have some pre-written code so that you don't have to do all the boilerplate stuff like importing libraries and defining common functions. Keep those things in your template which you personally use a lot.</p> </li> <li> <p>Set up a debugging flow. Debugging is a really challenging task and takes up a lot of time. You can setup a debugging template like this: https://lnkd.in/g5PtPpac for yourself so that you're able to debug your code much faster.</p> </li> <li> <p>Black box the common algorithms. Maintain a repository of common algorithms and Data Structures, so that you don't have to implement them from scratch every time. You can setup something like this: https://lnkd.in/g4WNyhZh</p> </li> <li> <p>Modularise your code as much as possible. Follow a good coding practice of making functions and breaking the problem into subproblems. This would also help you debug faster.</p> </li> </ul> <p>You can also checkout this playlist of mine on Youtube for more such tips: https://lnkd.in/gtDEaUKD</p> <p>hashtag#competitiveprogramming hashtag#codeforces hashtag#debugging hashtag#cptemplate hashtag#datastructures hashtag#algorithms hashtag#codingtests</p>"},{"location":"guide/dicas-de-resolucao/#httpswwwlinkedincompostspriyansh-agarwal_competitiveprogramming-codeforces-debugging-activity-7159248136928923648-tdcqutm_sourceshareutm_mediummember_desktoprcmacoaacp9fy4bwifllzjiwiieecyjxq8hhhn0awy","title":"https://www.linkedin.com/posts/priyansh-agarwal_competitiveprogramming-codeforces-debugging-activity-7159248136928923648-TdcQ?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAACp9fY4BwIFLlZJiWIIeecyJxq8hhhn0AwY","text":"<p>7 obvious ways to perform well in coding contests.</p> <p>\u27a1\ufe0f Sit through the complete contest, there is no point in quitting in a contest midway because you never know when you might get the right observations for a problem.</p> <p>\u27a1\ufe0f Use pen and paper to jot down all observations, you can only process limited information in your mind at a time. Writing down your thoughts helps a lot in combining a lot of different observations together.</p> <p>\u27a1\ufe0f Keep a track of leaderboard, solve problems in decreasing order of accepted solutions. A lot of times, the D problem is easier than C and you would never get to know this unless you see the leaderboard.</p> <p>\u27a1\ufe0f While you might be tempted to rush in the initial easy problems, always remember that spending extra 10 minutes on a problem is better than getting wrong submission penalties.</p> <p>\u27a1\ufe0f Sometimes you're completely stuck in your own approach. It is better to take a break in this case and come back with a fresh mind. Personally, I love to take at least one snack break during a contest.</p> <p>\u27a1\ufe0f When you're stuck on a problem for a very long time and you see there is enough time to try out the next harder problem, at least give it a read. You might find the next problem easier based on your strong and weak topics.</p> <p>\u27a1\ufe0f Make sure to upsolve. I can't stress upon this enough. A contest isn't over unless you've solved at least one of the unsolved problems after the contest. </p> <p>https://www.linkedin.com/posts/priyansh-agarwal_7-obvious-ways-to-perform-well-in-coding-activity-7122572814016012288-7Vak?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAACp9fY4BwIFLlZJiWIIeecyJxq8hhhn0AwY</p> <p>The real challenge is not coding a Dynamic Programming idea but it is to identify that a problem can be solved using Dynamic Programming. You won't become a better problem solver if you just do topic-wise problem solving. </p> <p>Consider this scenario: I provide you with 10 Dynamic Programming problems to solve. Then, I present you with an 11th problem, dropping a hint that it requires DP. Logically, this 11th problem wouldn't be overly challenging. </p> <p>However, does this situation truly occur in contests or interviews? Are you informed about the specific topic needed to solve a problem before attempting it? The most challenging part in a contest/interview is to figure out which concept to apply in a problem, actually using that concept is still pretty trivial. </p> <p>Hence, rather than solely focusing on solving problems based on specific topics, it is essential to engage in random problem solving as well. A great way to improve your ability to apply the learnt concepts is to attempt contests be it on codeforces, codechef or leetcode.</p> <p>Check out the video from the comments to learn about 6 more actionable tips to improve your logic and problem solving skills. </p> <p>hashtag#coding hashtag#programming hashtag#competitiveprogramming hashtag#interview hashtag#problemsolving hashtag#logic hashtag#subconsciousmind hashtag#codeforces hashtag#codechef</p> <p>https://www.linkedin.com/posts/priyansh-agarwal_coding-programming-competitiveprogramming-activity-7079055223586996225-o8cn?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAACp9fY4BwIFLlZJiWIIeecyJxq8hhhn0AwY</p> <p>If you're having your summer vacations and planning to up skill in Competitive Programming, here are my 7 tips for you as a Master on Codeforces and ICPC World Finalist...</p> <p>In this post, I will assume you're really passionate about CP and with no academic workload, you're ready to double down on your efforts.</p> <ol> <li> <p>No need to go for 5 different websites, pick up one (preferably Codeforces) and attempt ALL the contests on it. Don't forget to upsolve.</p> </li> <li> <p>Identify those topics which you've always struggled with. Set aside a minimum of 1 hour every day to just focus these topics.</p> </li> <li> <p>Think about problems while you are doing other activities like taking a shower or working out. You can code them once you find a computer or come back to your desk.</p> </li> <li> <p>If your rating is X, pick up 40% problems from X rating, another 40% from (X + 100) rating and remaining 20% from (X + 200) rating. </p> </li> <li> <p>Prefer Codeforces blogs over watching Youtube videos as reading involves more active learning. Read blogs of high rated coders on Codeforces.</p> </li> <li> <p>No need to spend hours struggling with a single problem. Set a timer and after 30-40 minutes of thinking, go for the editorial.</p> </li> <li> <p>CP is about creative thinking, spend 6/7 days a week grinding but take a day off to recharge your creativity.</p> </li> </ol> <p>Bonus: It gets lonely after some time. Find 2-3 friends to do CP with you or join some Discord community to stay motivated.</p> <p>You don't always have to compete in Competitive Programming. Allow me to break this down for you...</p> <ul> <li> <p>Mindset during and outside contest When you're in a contest, you compete against 20k (or more) other coders but when you're outside a contest, these 20k people are not your enemies. There are so many concepts that I had never studied myself but got to know them through some chat or discussions with other coders. Join discord servers, make friends, and help others to get help in return. </p> </li> <li> <p>The prevalent Ratingism Yes, you heard that right, Ratingism. How would you feel if you were a 1200 rated coder and some 1900 coder told you, \"I only talk to 1600+ people\". Bad right? So, why do it yourself? If you have more experience than others, you should be helping and setting a good example. I have seen some experienced people becoming so rude with beginners and it feels really bad.</p> </li> <li> <p>Content creation and Teaching I never understood lazy propagation in segment trees completely until I taught it myself at TLE Eliminators. If you know a particular topic or even if you want to strengthen your grip over a topic, you can just teach it to your friends. People like Vivek Gupta, Waqar Ahmad, Luv Kumar, Kartik Arora have made so much content on advanced CP concepts and I have a huge respect for them. You don't get views on such stuff but that's what keeps this community going.</p> </li> </ul> <p>TL;DR: Prefer collaboration over competition.</p> <p>-- It took me 3 years to become a Master on Codeforces. Here are 5 mistakes that I made in my journey which you can avoid to make your CP journey smoother and more efficient.</p> <ol> <li> <p>Not focussing on building my foundation in the early days and trying to rush things. For example, I had no idea about the verdicts of online judges like TLE, WA, RE, CE before I started attempting contests on Codeforces and CodeChef.</p> </li> <li> <p>Being obsessed with problems. I remember spending even 4-5 hours trying to think about certain problems only to realise that there were certain concepts that I had no idea about and it would have been a better idea to just look at the editorial after 30-40 minutes.</p> </li> <li> <p>Not using the black box strategy. CP is more about being creative rather than displaying your implementation skills or your algorithmic-knowledge. You don't necessarily have to know the internal working of every single algorithm before using it in your code.</p> </li> <li> <p>Not making enough use of pen and paper. The human mind is capable of a lot of things but when it comes to CP, you might want to keep it free for some creative thinking rather than trying to remember every single observation you've made in a problem. </p> </li> <li> <p>Not taking breaks. CP is a long journey and if you don't take breaks every now and then, you are only going to find yourself burnt out in a few months. Taking breaks also helps you let go the feeling of demotivation you might have after a phase of bad performances. </p> </li> </ol> <p>In case you would like to listen to me talk about the above 5 points in more detail, you can check out my youtube video from the link in the comments. </p> <p>hashtag#competitiveprogramming hashtag#codeforces hashtag#codechef hashtag#algorithms hashtag#datastructures hashtag#journey hashtag#experience hashtag#mistakes hashtag#learning hashtag#problemsolving hashtag#psychology hashtag#strategy</p> <p>I have solved 3000+ problems on all DSA/CP platforms combined. Here are 5 non obvious things to keep in mind while solving any DSA or Competitive Programming problem to get the most out of it.</p> <ul> <li> <p>Always prove why your solution works This is crucial for greedy and constructive problems. Many people just rely on their intuition to solve problems. It is the worst strategy and only sets you up for failure in the long run. Learn to prove solutions and explain them.</p> </li> <li> <p>Never get obsessed with a problem There is a limit to the amount of time you should spend thinking about a problem. Ideally you shouldn't spend over an hour just thinking about the problem without making any progress. Spending a lot of time on coding/debugging is still fine.</p> </li> <li> <p>Do not over optimise If a problem requires an O(N) solution, don't be oversmart and try to come up with an O(logN) solution. Firstly, analyse the constraints in a problem and then figure out how much optimisation is required. Understanding time and space complexity is crucial.</p> </li> <li> <p>Read solutions of others.  After you get an accepted verdict on a problem, you should look at the codes submitted by other coders, preferably of those people who are more experienced or higher rated than you. This will introduce you to various optimisations and new concepts.</p> </li> <li> <p>Tell yourself you are STUPID more often. Most people think that whatever approach they come up with for the first time is the best for a problem. Learn to give up on your own ideas. Think in alternate directions. If it isn't working out for long enough, try something else.</p> </li> </ul> <p>Lastly, don't give up and enjoy the process. If you're doing this to improve your problem solving skills, ultimately you will become a good problem solver so don't take it so seriously and cherish the dopamine boost you get after every green tick.</p> <p>hashtag#dsa hashtag#competitiveprogramming hashtag#algorithms hashtag#codeforces hashtag#codechef hashtag#interviewpreparation hashtag#placements hashtag#internships</p>"},{"location":"guide/dicas/","title":"\ud83e\udde0 Estrat\u00e9gias &amp; Dicas","text":""},{"location":"guide/dicas/#estrategias","title":"\ud83c\udfaf Estrat\u00e9gias","text":"<p>\ud83c\udfa5 V\u00eddeo \u2014 Estrat\u00e9gias para Concursos de Programa\u00e7\u00e3o Competitiva (ICPC-style): Assista no Dropbox</p>"},{"location":"guide/dicas/#dicas-e-problemas-frequentes","title":"\ud83e\udde9 Dicas e Problemas Frequentes","text":""},{"location":"guide/dicas/#meu-codigo-parece-ter-complexidade-aceitavel-mas-recebo-tle","title":"\ud83d\udc22 Meu c\u00f3digo parece ter complexidade aceit\u00e1vel, mas recebo TLE","text":"<ul> <li>Verifique se est\u00e1 passando arrays por refer\u00eancia nas fun\u00e7\u00f5es. Passar por valor cria uma c\u00f3pia (O(n)), o que pode aumentar drasticamente a complexidade real.</li> <li>Confirme a complexidade das opera\u00e7\u00f5es nas estruturas de dados:</li> <li><code>unordered_set</code>: remo\u00e7\u00e3o pode ser O(n) no pior caso.</li> <li><code>map</code> / <code>set</code>: geralmente O(log n) gra\u00e7as a \u00e1rvores balanceadas.</li> </ul>"},{"location":"guide/dicas/#como-escolher-a-estrutura-de-dados-ideal","title":"\ud83e\udde0 Como escolher a estrutura de dados ideal?","text":"<ul> <li>Compare fatores constantes:</li> <li>Fenwick Tree costuma ser mais r\u00e1pida que Segment Tree, embora menos flex\u00edvel.</li> <li>Se ambas forem v\u00e1lidas, prefira a que tem desempenho pr\u00e1tico melhor (como Fenwick Tree).</li> </ul>"},{"location":"guide/dicas/#todos-os-testes-passam-mas-recebo-wa","title":"\u274c Todos os testes passam, mas recebo WA","text":"<ul> <li>Cheque os limites dos tipos de dados:</li> <li>Se estiver somando valores grandes (ex: at\u00e9 10\u2079), evite <code>int</code> \u2014 use <code>long long</code>.</li> <li>Overflows silenciosos s\u00e3o uma causa comum de erro em ju\u00edzes autom\u00e1ticos.</li> </ul>"},{"location":"guide/dicas/#durante-o-concurso","title":"Durante o Concurso","text":"<p>Objetivo durante a competi\u00e7\u00e3o deve ser resolver o m\u00e1ximo poss\u00edvel. O mais r\u00e1pido poss\u00edvel, da melhor forma poss\u00edvel, e o placar por fora vem depois. Concentre-se em resolver. Concentre-se no pr\u00f3ximo problema. By Um_nik</p>"},{"location":"guide/dicas/#aumentando-o-tamanho-da-stack-para-melhorar-desempenho","title":"Aumentando o Tamanho da Stack para Melhorar Desempenho","text":"<ul> <li>Em alguns cen\u00e1rios, um algoritmo implementado com Programa\u00e7\u00e3o Din\u00e2mica (DP) pode ter uma l\u00f3gica correta, mas apresentar lentid\u00e3o excessiva durante a execu\u00e7\u00e3o local devido a limita\u00e7\u00f5es no tamanho da stack. Esse problema \u00e9 comum quando h\u00e1 muitas chamadas recursivas ou estruturas de dados profundas. Para resolver, voc\u00ea pode aumentar manualmente o limite da stack utilizando o comando <code>ulimit -s unlimited</code> (no Linux) ou compilar o programa com a flag espec\u00edfica para alocar mais mem\u00f3ria, como <code>g++ your_program.cpp -Wl,--stack,20000000 -o your_program</code> (no Windows).  </li> <li>Essas configura\u00e7\u00f5es permitem que a stack acomode um volume maior de opera\u00e7\u00f5es, evitando stack overflows e garantindo que o algoritmo retorne o resultado correto dentro do tempo esperado. Ajustes como esses s\u00e3o especialmente \u00fateis em competi\u00e7\u00f5es de programa\u00e7\u00e3o ou ao lidar com entradas extensas.</li> </ul> <p>\ud83d\udca1 Estas dicas s\u00e3o baseadas em erros comuns de participantes em concursos e plataformas como Codeforces, AtCoder e outros.</p>"},{"location":"guide/ferramentas-bibliotecas/","title":"\ud83e\uddf0 Ferramentas e Bibliotecas","text":""},{"location":"guide/ferramentas-bibliotecas/#atcoder-library-acl","title":"\ud83d\udcda AtCoder Library (ACL)","text":"<p>A AtCoder Library \u00e9 uma cole\u00e7\u00e3o oficial de implementa\u00e7\u00f5es altamente otimizadas e testadas em competi\u00e7\u00f5es, amplamente usada em problemas de programa\u00e7\u00e3o competitiva.</p>"},{"location":"guide/ferramentas-bibliotecas/#recursos","title":"Recursos","text":"<ul> <li>\ud83d\udd17 Reposit\u00f3rio oficial no GitHub</li> <li>\ud83d\udcd8 Documenta\u00e7\u00e3o</li> <li>\ud83d\udce6 Pode ser utilizada diretamente com C++ (requer <code>#include</code> e compila\u00e7\u00e3o com <code>-std=c++17</code>)</li> </ul>"},{"location":"guide/ferramentas-bibliotecas/#principais-modulos","title":"Principais m\u00f3dulos","text":"<ul> <li><code>dsu</code>: Union-Find</li> <li><code>fenwick_tree</code></li> <li><code>segment_tree</code></li> <li><code>modint</code>: Aritm\u00e9tica modular</li> <li><code>convolution</code>: FFT</li> <li><code>scc</code>: Strongly Connected Components</li> </ul> <p>\ud83d\udca1 Ideal para quem compete em AtCoder, Codeforces, e outras competi\u00e7\u00f5es internacionais.</p>"},{"location":"guide/ferramentas-bibliotecas/#geracao-de-casos-de-teste","title":"\ud83e\uddea Gera\u00e7\u00e3o de Casos de Teste","text":"<p>Ferramentas para gerar entradas e sa\u00eddas autom\u00e1ticas para validar algoritmos:</p>"},{"location":"guide/ferramentas-bibliotecas/#test-case-generator","title":"\ud83e\uddf1 Test Case Generator","text":"<ul> <li>\ud83d\udd17 GitHub \u2013 tcframe: framework usado por problemas do AtCoder.</li> <li>\ud83d\udd17 testlib.h (Polygon/Testlib): usado em Codeforces e outras plataformas.</li> <li>\ud83d\udd27 \u00datil para validar:</li> <li>Tempo de execu\u00e7\u00e3o em limites altos</li> <li>Robustez de solu\u00e7\u00f5es alternativas (ex: brute force vs otimizada)</li> </ul>"},{"location":"guide/ferramentas-bibliotecas/#sugestao-de-setup","title":"Sugest\u00e3o de Setup","text":""},{"location":"guide/ferramentas-bibliotecas/#extensoes-recomendadas","title":"Extens\u00f5es Recomendadas","text":"<ul> <li> <p>Competitive Programming Helper (cph) https://marketplace.visualstudio.com/items?itemName=DivyanshuAgrawal.competitive-programming-helper</p> </li> <li> <p>Competitive Companion https://chromewebstore.google.com/detail/competitive-companion/cjnmckjndlpiamhfimnnjmnckgghkjbl</p> </li> <li> <p>C/C++ for Visual Studio Code https://code.visualstudio.com/docs/languages/cpp</p> </li> <li> <p>Configura\u00e7\u00e3o do MinGW https://code.visualstudio.com/docs/cpp/config-mingw</p> </li> <li> <p>Snippets (User Defined Snippets) https://code.visualstudio.com/docs/editing/userdefinedsnippets</p> </li> </ul>"},{"location":"guide/ferramentas-bibliotecas/#snippet-template-c","title":"Snippet Template (C++):","text":"<p>Copie e cole em <code>Configuration &gt; Configure Snippets &gt; Existing Snippets</code>:</p> Snippet Template<pre><code>{\n    \"Template for Competitive Programming AtCoder\": {\n      \"prefix\": \"cp\",\n      \"body\": [\n        \"#include &lt;bits/stdc++.h&gt;\",\n        \"#include &lt;atcoder/all&gt;\",\n        \"\",\n        \"#define IOS ios_base::sync_with_stdio(false);\",\n        \"using ll = long long;\",\n        \"\",\n        \"using namespace std;\",\n        \"\",\n        \"#ifndef ONLINE_JUDGE\",\n        \"#include \\\"aocpc/all\\\"\",\n        \"using namespace aocpc;\",\n        \"#else\",\n        \"#define dbg(...)\",\n        \"#endif\",\n        \"\",\n        \"const int SZ = 2e5+1, mod = 1e9 + 7;\",\n        \"\",\n        \"void run_case() {\",\n        \"    $0\",\n        \"}\",\n        \"\",\n        \"int main() {\",\n        \"    IOS;\",\n        \"    int t = 1;\",\n        \"    // cin &gt;&gt; t;\",\n        \"    while(t--) run_case();\",\n        \"    return 0;\",\n        \"}\",\n        \"\",\n        \"/*\",\n            \"   COMPETITIVE PROGRAMMING PROBLEM-SOLVING FRAMEWORK\",\n            \"\",\n            \"   1. UNDERSTAND PHASE\",\n            \"   - [ ] Read problem statement carefully (twice)\",\n            \"   - [ ] Identify constraints (n, time limits, memory)\",\n            \"   - [ ] Restate problem in your own words\",\n            \"   - [ ] Check sample inputs/outputs thoroughly\",\n            \"   \",\n            \"   2. THINK PHASE\",\n            \"   - [ ] Assume your first idea is WRONG - test/disprove it\",\n            \"   - [ ] Use pen &amp; paper for:\",\n            \"       \u2022 Ideas &amp; observations\",\n            \"       \u2022 Test cases (edge cases)\",\n            \"       \u2022 Pattern recognition\",\n            \"   - [ ] Finalize approach BEFORE coding\",\n            \"   - [ ] Can you argue for its correctness?\",\n            \"   \",\n            \"   3. IMPLEMENT PHASE\",\n            \"   - [ ] Code only when confident in logic\",\n            \"   - [ ] Write clean, modular code\",\n            \"   - [ ] Test with your cases before submitting\",\n            \"   \",\n            \"   4. REVIEW PHASE\",\n            \"   - [ ] If WA: Don't just resubmit - rethink\",\n            \"   - [ ] If AC: Check others' solutions for better approaches\",\n            \"   - [ ] What did you learn? Add to your mental toolkit\",\n            \"\",\n            \"   GOLDEN RULE: Think twice, code once.\",\n            \"\",\n            \"   *   Problem solving is a lifestyle.\",\n            \"   **  Think first, then code.\",\n            \"\",\n            \"   date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}\",\n            \"*/\"\n      ],\n      \"description\": \"AtCoder - Template for Competitive Programming\"\n    },\n    \"Template for Competitive Programming CPC Codeforces\": {\n      \"prefix\": \"cpc\",\n      \"body\": [\n        \"#include &lt;bits/stdc++.h&gt;\",\n        \"\",\n        \"#define IOS ios_base::sync_with_stdio(false);\",\n        \"using ll = long long;\",\n        \"\",\n        \"using namespace std;\",\n        \"\",\n        \"#ifndef ONLINE_JUDGE\",\n        \"#include \\\"aocpc/all\\\"\",\n        \"using namespace aocpc;\",\n        \"#else\",\n        \"#define dbg(...)\",\n        \"#endif\",\n        \"\",\n        \"const int SZ = 2e5+1, mod = 1e9 + 7;\",\n        \"\",\n        \"void run_case() {\",\n        \"    $0\",\n        \"}\",\n        \"\",\n        \"int main() {\",\n        \"    IOS;\",\n        \"    int t = 1;\",\n        \"    cin &gt;&gt; t;\",\n        \"    while(t--) run_case();\",\n        \"    return 0;\",\n        \"}\",\n        \"\",\n        \"/*\",\n            \"   COMPETITIVE PROGRAMMING PROBLEM-SOLVING FRAMEWORK\",\n            \"\",\n            \"   1. UNDERSTAND PHASE\",\n            \"   - [ ] Read problem statement carefully (twice)\",\n            \"   - [ ] Identify constraints (n, time limits, memory)\",\n            \"   - [ ] Restate problem in your own words\",\n            \"   - [ ] Check sample inputs/outputs thoroughly\",\n            \"   \",\n            \"   2. THINK PHASE\",\n            \"   - [ ] Assume your first idea is WRONG - test/disprove it\",\n            \"   - [ ] Use pen &amp; paper for:\",\n            \"       \u2022 Ideas &amp; observations\",\n            \"       \u2022 Test cases (edge cases)\",\n            \"       \u2022 Pattern recognition\",\n            \"   - [ ] Finalize approach BEFORE coding\",\n            \"   - [ ] Can you argue for its correctness?\",\n            \"\",\n            \"   3. IMPLEMENT PHASE\",\n            \"   - [ ] Code only when confident in logic\",\n            \"   - [ ] Write clean, modular code\",\n            \"   - [ ] Test with your cases before submitting\",\n            \"   \",\n            \"   4. REVIEW PHASE\",\n            \"   - [ ] If WA: Don't just resubmit - rethink\",\n            \"   - [ ] If AC: Check others' solutions for better approaches\",\n            \"   - [ ] What did you learn? Add to your mental toolkit\",\n            \"\",\n            \"   GOLDEN RULE: Think twice, code once.\",\n            \"\",\n            \"   *   Problem solving is a lifestyle.\",\n            \"   **  Think first, then code.\",\n            \"\",\n            \"   $0\",\n\n            \"   date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}\",\n            \"*/\"\n      ],\n      \"description\": \"Codeforces - Template for Competitive Programming\"\n    }\n  }\n</code></pre>"},{"location":"guide/links-aleatorios/","title":"T\u00e9cnicas de Programa\u00e7\u00e3o Din\u00e2mica","text":""},{"location":"guide/links-aleatorios/#tutorials","title":"Tutorials","text":"<ul> <li>Non-trivial DP Tricks and Techniques - Part 1</li> <li>Non-trivial DP Tricks and Techniques - Part 2</li> <li>How to Solve Questions [Dominater Version]</li> </ul>"},{"location":"guide/links-aleatorios/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Advanced Dynamic Programming: Slope Trick (3/8)</li> </ul>"},{"location":"guide/links-aleatorios/#properties","title":"Properties","text":"<ul> <li>Propriedade do valor absoluto: <code>abs(A) = max(A, -A)</code></li> </ul>"},{"location":"guide/materiais/","title":"Materiais de Apoio","text":""},{"location":"guide/materiais/#materiais-de-apoio","title":"Materiais de Apoio","text":"<p>Organizado por Edi\u00e7\u00e3o, tamb\u00e9m cont\u00e9m os problemsets dos concursos passados. https://mega.nz/folder/jTp2mLqR#QEzN5ZYgD0R6Zer7O_4OAQ</p>"},{"location":"guide/materiais/#referencia-em-portugues","title":"Refer\u00eancia em Portugu\u00eas","text":"<p>https://www.dcc.fc.up.pt/~pribeiro/aulas/daa2223/apoio.html</p> <p>ATEN\u00c7\u00c3O: Os problemas n\u00e3o est\u00e3o organizados em ordem crescente de dificuldades. Portanto, devem ler todos os problemas, pois alguns poder\u00e3o ser mais simples do que os outros!</p> <p>Podem visitar os links que se seguem para verem algumas dicas de como fazer leitura e escrita r\u00e1pida nas linguagens de programa\u00e7\u00e3o permitidas no concurso: 1. https://www.dcc.fc.up.pt/~pribeiro/aulas/daa2223/praticas/fastio.html 2. https://www.geeksforgeeks.org/fast-i-o-for-competitive-programming-in-python/</p> <p>Suporte para C++: https://www.learncpp.com/</p>"},{"location":"guide/materiais/#repositorios-diversos","title":"Reposit\u00f3rios Diversos","text":"<ol> <li>CP Algorithms: https://cp-algorithms.com/index.html</li> <li>Guia USACO: https://usaco.guide/</li> </ol>"},{"location":"guide/materiais/#pc2-guide","title":"PC^2 Guide","text":"<ol> <li>PC^2 Competitive Programming Guide: https://youtube.com/watch?v=sZs-uFf1HKo&amp;t=914s</li> </ol>"},{"location":"guide/materiais/#artigos-importantes","title":"Artigos Importantes","text":"<ol> <li>Por que estudar Programa\u00e7\u00e3o Competitiva?: https://medium.com/@osvaldozamba/por-que-estudar-programa%C3%A7%C3%A3o-competitiva-7a2ccadb30aa</li> <li>A Import\u00e2ncia da Programa\u00e7\u00e3o Competitiva em Angola: https://alfredomartins-codetyper.medium.com/a-importancia-da-programacao-competitiva-em-angola-dd92fc3ccc38</li> <li>Onde est\u00e3o os pr\u00f3ximos campe\u00f5es do AOCPC?: https://medium.com/@patrickdaniel016/onde-est%C3%A3o-os-pr%C3%B3ximos-campe%C3%B5es-do-aocpc-75ec9e338f24</li> </ol>"},{"location":"guide/materiais/#canais-uteis","title":"Canais \u00dateis","text":"<ol> <li>Algorithms with Shayan [https://www.youtube.com/@AlgorithmswithShayan]</li> <li>Errichto Algorithms [https://www.youtube.com/@Errichto]</li> <li>aryanc403 [https://www.youtube.com/@aryanc403]</li> <li>take U forward [https://www.youtube.com/@takeUforward]</li> </ol>"},{"location":"guide/praticar/","title":"Praticar","text":""},{"location":"guide/praticar/#contests-de-treinos","title":"Contests de Treinos","text":"<p>Junte-se 1\u00ba ao grupo do VJUDGE para ter acesso aos contests: 1. https://vjudge.net/group/aocpc_tc25 2. https://vjudge.net/group/aocpc_tc24 3. Contests da nossa regi\u00e3o, criado pelo Problem Setter Moamen Ahmed : https://codeforces.com/group/Rilx5irOux/blog</p>"},{"location":"guide/praticar/#plataformas-de-programacao-competitiva","title":"Plataformas de Programa\u00e7\u00e3o Competitiva","text":"<ol> <li>CodeForces: https://codeforces.com/</li> <li>AtCoder: https://atcoder.jp/</li> <li>CodeChef: https://www.codechef.com/</li> <li>Hacker Earth: https://www.hackerearth.com/practice/</li> <li>Hacker Rank: https://www.hackerrank.com/dashboard</li> <li>Kenkoooo (Reposit\u00f3rio do AtCoder): https://kenkoooo.com/atcoder/#/table/</li> <li>CSES Problem Set: https://cses.fi/problemset/</li> <li>OJ (IOI Problems): https://oj.uz/problems</li> </ol>"},{"location":"guide/praticar/#quizzes","title":"Quizzes","text":"<p>Quiz conceitual sobre Complexidade de Algoritmos: https://forms.office.com/r/77dPDhw3Av</p>"},{"location":"guide/suplementary-resources/","title":"Suplementary resources","text":"<p>A2SV Recommended Supplementary Resources for Students</p> <p>The Heads of Education have carefully selected these valuable resources to support your learning. They are designed to help you strengthen your problem-solving skills, master algorithms, and excel in competitive programming.</p> <p>\ud83d\udd0d Problem-Solving Platforms</p> <p>\u2705 USACO Guide (https://usaco.guide/) \u2013 A structured path to learning algorithms, especially for competitive programming. \u2705 SPOJ (https://www.spoj.com/) \u2013 A vast collection of classical problems to practice. \u2705 CodeChef Roadmap (https://www.codechef.com/roadmap/become-5-star) \u2013 A guide to achieving a 5-star rating on CodeChef. \u2705 HackerEarth (https://www.hackerearth.com/practice/data-structures/arrays/1-d/practice-problems/) \u2013 Well-structured problem sets with to-the-point explanations.</p> <p>\ud83d\udcda Algorithm &amp; Competitive Programming Theory</p> <p>\ud83d\udcd6 CP-Algorithms (https://cp-algorithms.com/) \u2013 A collection of algorithms and data structures with detailed explanations. \ud83d\udcd6 CSES Competitive Programming Handbook  (https://cses.fi/book/book.pdf)\u2013 A comprehensive guide covering important algorithms and techniques. \ud83d\udcd6 How to Solve It - George Polya  (https://www.hlevkin.com/hlevkin/90MathPhysBioBooks/Math/Polya/George_Polya_How_To_Solve_It_.pdf)\u2013 A classic book on problem-solving strategies. pdfcoffee_com_397984814_meenakshi_rawat_k_dynamic_programming_for.pdf (https://drive.google.com/file/d/1GHvzZPiEELx5LmYFIWBNTv1p2dhR4Ll_/view?usp=sharing) - A guide for dynamic programming.</p> <p>\ud83d\udcdd Study Plans and Problem sets</p> <p>\ud83d\udccc Junior training sheet  (https://docs.google.com/spreadsheets/d/1iJZWP2nS_OB3kCTjq8L6TrJJ4o-5lhxDOyTaocSYc-k/edit?gid=84654839#gid=84654839): Training sheet from a popular software engineer named mostafa saad (There is an english video explaining how can you use it): \ud83d\udccc ICPC Assiut Materials (https://docs.google.com/spreadsheets/d/1EbbsotAwb0zuuwxyzs8l2qh8twqw-sNcNbAjCK1kXaE/edit?gid=2079483064#gid=2079483064) \ud83d\udccc Dynamic Programming Study Plan  (https://leetcode.com/studyplan/dynamic-programming/)\u2013 A step-by-step guide to mastering DP. \ud83d\udccc Bottom-up DP (https://atcoder.jp/contests/dp/tasks) \u2013 A collection of DP problems from AtCoder. \ud83d\udcccDp tutorial  (https://codeforces.com/blog/entry/67679) \ud83d\udcccContests   (https://codeforces.com/group/isP4JMZTix/contests)- Topic wise code forces contests.</p> <p>\ud83d\udcca Fundamental Concepts &amp; Visualizations</p> <p>\ud83d\udd39 VisuAlgo (https://visualgo.net/en) \u2013 Interactive visualizations of data structures and algorithms. \ud83d\udd39 Recursion (https://recursion.vercel.app/) \u2013 A simple tool to visualize recursion calls.</p> <p>\ud83c\udfa5 Video Explanations &amp; Tutorials</p> <p>\u25b6\ufe0f NeetCode (https://www.youtube.com/results?search_query=neetcode) \u2013 High-quality problem-solving explanations. \u25b6\ufe0f AtCoder DP Editorial (https://www.youtube.com/playlist?list=PL6h2Gn3JK5Lnew3sVMFp0sNWBOgsDo62x) \u2013 Video explanations for AtCoder\u2019s DP problem set. \u25b6\ufe0f Dynamic Programming Explanation (https://youtu.be/ASoaQq66foQ?si=BSlMrts5AwX10Nys) \u2013 A well-explained introduction to DP concepts.</p> <p>\ud83d\ude80 Start exploring these resources and level up your problem-solving skills!</p>"}]}